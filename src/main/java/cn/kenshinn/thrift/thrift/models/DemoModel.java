/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.kenshinn.thrift.thrift.models;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-04-05")
public class DemoModel implements org.apache.thrift.TBase<DemoModel, DemoModel._Fields>, java.io.Serializable, Cloneable, Comparable<DemoModel> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DemoModel");

  private static final org.apache.thrift.protocol.TField ATTR1_FIELD_DESC = new org.apache.thrift.protocol.TField("attr1", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ATTR2_FIELD_DESC = new org.apache.thrift.protocol.TField("attr2", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ATTR3_FIELD_DESC = new org.apache.thrift.protocol.TField("attr3", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LONG4_FIELD_DESC = new org.apache.thrift.protocol.TField("long4", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DemoModelStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DemoModelTupleSchemeFactory());
  }

  public String attr1; // required
  public String attr2; // required
  public String attr3; // required
  public long long4; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ATTR1((short)1, "attr1"),
    ATTR2((short)2, "attr2"),
    ATTR3((short)3, "attr3"),
    LONG4((short)4, "long4");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ATTR1
          return ATTR1;
        case 2: // ATTR2
          return ATTR2;
        case 3: // ATTR3
          return ATTR3;
        case 4: // LONG4
          return LONG4;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LONG4_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ATTR1, new org.apache.thrift.meta_data.FieldMetaData("attr1", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ATTR2, new org.apache.thrift.meta_data.FieldMetaData("attr2", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ATTR3, new org.apache.thrift.meta_data.FieldMetaData("attr3", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LONG4, new org.apache.thrift.meta_data.FieldMetaData("long4", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DemoModel.class, metaDataMap);
  }

  public DemoModel() {
  }

  public DemoModel(
    String attr1,
    String attr2,
    String attr3,
    long long4)
  {
    this();
    this.attr1 = attr1;
    this.attr2 = attr2;
    this.attr3 = attr3;
    this.long4 = long4;
    setLong4IsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DemoModel(DemoModel other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAttr1()) {
      this.attr1 = other.attr1;
    }
    if (other.isSetAttr2()) {
      this.attr2 = other.attr2;
    }
    if (other.isSetAttr3()) {
      this.attr3 = other.attr3;
    }
    this.long4 = other.long4;
  }

  public DemoModel deepCopy() {
    return new DemoModel(this);
  }

  @Override
  public void clear() {
    this.attr1 = null;
    this.attr2 = null;
    this.attr3 = null;
    setLong4IsSet(false);
    this.long4 = 0;
  }

  public String getAttr1() {
    return this.attr1;
  }

  public DemoModel setAttr1(String attr1) {
    this.attr1 = attr1;
    return this;
  }

  public void unsetAttr1() {
    this.attr1 = null;
  }

  /** Returns true if field attr1 is set (has been assigned a value) and false otherwise */
  public boolean isSetAttr1() {
    return this.attr1 != null;
  }

  public void setAttr1IsSet(boolean value) {
    if (!value) {
      this.attr1 = null;
    }
  }

  public String getAttr2() {
    return this.attr2;
  }

  public DemoModel setAttr2(String attr2) {
    this.attr2 = attr2;
    return this;
  }

  public void unsetAttr2() {
    this.attr2 = null;
  }

  /** Returns true if field attr2 is set (has been assigned a value) and false otherwise */
  public boolean isSetAttr2() {
    return this.attr2 != null;
  }

  public void setAttr2IsSet(boolean value) {
    if (!value) {
      this.attr2 = null;
    }
  }

  public String getAttr3() {
    return this.attr3;
  }

  public DemoModel setAttr3(String attr3) {
    this.attr3 = attr3;
    return this;
  }

  public void unsetAttr3() {
    this.attr3 = null;
  }

  /** Returns true if field attr3 is set (has been assigned a value) and false otherwise */
  public boolean isSetAttr3() {
    return this.attr3 != null;
  }

  public void setAttr3IsSet(boolean value) {
    if (!value) {
      this.attr3 = null;
    }
  }

  public long getLong4() {
    return this.long4;
  }

  public DemoModel setLong4(long long4) {
    this.long4 = long4;
    setLong4IsSet(true);
    return this;
  }

  public void unsetLong4() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LONG4_ISSET_ID);
  }

  /** Returns true if field long4 is set (has been assigned a value) and false otherwise */
  public boolean isSetLong4() {
    return EncodingUtils.testBit(__isset_bitfield, __LONG4_ISSET_ID);
  }

  public void setLong4IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LONG4_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ATTR1:
      if (value == null) {
        unsetAttr1();
      } else {
        setAttr1((String)value);
      }
      break;

    case ATTR2:
      if (value == null) {
        unsetAttr2();
      } else {
        setAttr2((String)value);
      }
      break;

    case ATTR3:
      if (value == null) {
        unsetAttr3();
      } else {
        setAttr3((String)value);
      }
      break;

    case LONG4:
      if (value == null) {
        unsetLong4();
      } else {
        setLong4((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ATTR1:
      return getAttr1();

    case ATTR2:
      return getAttr2();

    case ATTR3:
      return getAttr3();

    case LONG4:
      return getLong4();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ATTR1:
      return isSetAttr1();
    case ATTR2:
      return isSetAttr2();
    case ATTR3:
      return isSetAttr3();
    case LONG4:
      return isSetLong4();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DemoModel)
      return this.equals((DemoModel)that);
    return false;
  }

  public boolean equals(DemoModel that) {
    if (that == null)
      return false;

    boolean this_present_attr1 = true && this.isSetAttr1();
    boolean that_present_attr1 = true && that.isSetAttr1();
    if (this_present_attr1 || that_present_attr1) {
      if (!(this_present_attr1 && that_present_attr1))
        return false;
      if (!this.attr1.equals(that.attr1))
        return false;
    }

    boolean this_present_attr2 = true && this.isSetAttr2();
    boolean that_present_attr2 = true && that.isSetAttr2();
    if (this_present_attr2 || that_present_attr2) {
      if (!(this_present_attr2 && that_present_attr2))
        return false;
      if (!this.attr2.equals(that.attr2))
        return false;
    }

    boolean this_present_attr3 = true && this.isSetAttr3();
    boolean that_present_attr3 = true && that.isSetAttr3();
    if (this_present_attr3 || that_present_attr3) {
      if (!(this_present_attr3 && that_present_attr3))
        return false;
      if (!this.attr3.equals(that.attr3))
        return false;
    }

    boolean this_present_long4 = true;
    boolean that_present_long4 = true;
    if (this_present_long4 || that_present_long4) {
      if (!(this_present_long4 && that_present_long4))
        return false;
      if (this.long4 != that.long4)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_attr1 = true && (isSetAttr1());
    list.add(present_attr1);
    if (present_attr1)
      list.add(attr1);

    boolean present_attr2 = true && (isSetAttr2());
    list.add(present_attr2);
    if (present_attr2)
      list.add(attr2);

    boolean present_attr3 = true && (isSetAttr3());
    list.add(present_attr3);
    if (present_attr3)
      list.add(attr3);

    boolean present_long4 = true;
    list.add(present_long4);
    if (present_long4)
      list.add(long4);

    return list.hashCode();
  }

  @Override
  public int compareTo(DemoModel other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAttr1()).compareTo(other.isSetAttr1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttr1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attr1, other.attr1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttr2()).compareTo(other.isSetAttr2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttr2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attr2, other.attr2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttr3()).compareTo(other.isSetAttr3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttr3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attr3, other.attr3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLong4()).compareTo(other.isSetLong4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLong4()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.long4, other.long4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DemoModel(");
    boolean first = true;

    sb.append("attr1:");
    if (this.attr1 == null) {
      sb.append("null");
    } else {
      sb.append(this.attr1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("attr2:");
    if (this.attr2 == null) {
      sb.append("null");
    } else {
      sb.append(this.attr2);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("attr3:");
    if (this.attr3 == null) {
      sb.append("null");
    } else {
      sb.append(this.attr3);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("long4:");
    sb.append(this.long4);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    if (attr1 == null) {
      throw new TProtocolException("Required field 'attr1' was not present! Struct: " + toString());
    }
    if (attr2 == null) {
      throw new TProtocolException("Required field 'attr2' was not present! Struct: " + toString());
    }
    if (attr3 == null) {
      throw new TProtocolException("Required field 'attr3' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'long4' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DemoModelStandardSchemeFactory implements SchemeFactory {
    public DemoModelStandardScheme getScheme() {
      return new DemoModelStandardScheme();
    }
  }

  private static class DemoModelStandardScheme extends StandardScheme<DemoModel> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DemoModel struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ATTR1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.attr1 = iprot.readString();
              struct.setAttr1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ATTR2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.attr2 = iprot.readString();
              struct.setAttr2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ATTR3
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.attr3 = iprot.readString();
              struct.setAttr3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LONG4
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.long4 = iprot.readI64();
              struct.setLong4IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetLong4()) {
        throw new TProtocolException("Required field 'long4' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DemoModel struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.attr1 != null) {
        oprot.writeFieldBegin(ATTR1_FIELD_DESC);
        oprot.writeString(struct.attr1);
        oprot.writeFieldEnd();
      }
      if (struct.attr2 != null) {
        oprot.writeFieldBegin(ATTR2_FIELD_DESC);
        oprot.writeString(struct.attr2);
        oprot.writeFieldEnd();
      }
      if (struct.attr3 != null) {
        oprot.writeFieldBegin(ATTR3_FIELD_DESC);
        oprot.writeString(struct.attr3);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LONG4_FIELD_DESC);
      oprot.writeI64(struct.long4);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DemoModelTupleSchemeFactory implements SchemeFactory {
    public DemoModelTupleScheme getScheme() {
      return new DemoModelTupleScheme();
    }
  }

  private static class DemoModelTupleScheme extends TupleScheme<DemoModel> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DemoModel struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.attr1);
      oprot.writeString(struct.attr2);
      oprot.writeString(struct.attr3);
      oprot.writeI64(struct.long4);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DemoModel struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.attr1 = iprot.readString();
      struct.setAttr1IsSet(true);
      struct.attr2 = iprot.readString();
      struct.setAttr2IsSet(true);
      struct.attr3 = iprot.readString();
      struct.setAttr3IsSet(true);
      struct.long4 = iprot.readI64();
      struct.setLong4IsSet(true);
    }
  }

}

